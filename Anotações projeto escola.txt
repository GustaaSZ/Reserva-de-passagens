Mini Projeto de Reserva de passagens de ônibus em C:
- FUNÇÕES A SEREM IMPLEMENTADAS:

verificação de cpf - X
verificação de nomes iguais - 
não permitir a compra de passagem de um mesmo passageiro para o mesmo onibus duas vezes - 
criar uma variável de uma strcut de conta para o passageiro - X
criar uma variável de valorPassagem para o cadastro de cada bus - X
implementar a struct de reserva/ (passagem) - 
implementar função de remover passageiro - 
implementar função de remover onibus - 
implementar funcao de att passageiro - 
implementar funcao de att onibus - 
implementar funcao de buscar passageiro - 
implementar funcao de bucar onibus - 
implementar strcut de dadosViagem com horario de saida e chegada - 

Fiz as alterações que voce me recomendou, porem continua exibindo os horarios de forma incorreta. Segue o codigo abaixo:
struct:
typedef struct _dadosViagem{
    char dataPartida_str[TamanhoData];
    char dataChegada_str[TamanhoData];
    char horarioPartida_str[TamanhoHorario];
    char horarioChegada_str[TamanhoHorario];
} DadosViagem;

cod:

// Add onibus ao vetor de onibus
void add_bus(Bus *bus, unsigned int numBus, const char *origem, const char *destino, unsigned int capacidade, float valorPassagem, char *horarioPartida, char *horarioChegada, char *dataPartida, char *dataChegada){
    if(bus->num_bus_in_vec <= bus->capacidadeMaxvector){
        Bus new_bus;
        new_bus.numero_bus = numBus;
        new_bus.origem = strdup(origem); // Alocando memoria para o ponteiro origem
        new_bus.destino= strdup(destino); // Alocando memoria para o ponteiro destino
        new_bus.capacidade = capacidade;
        new_bus.assentos_disponiveis = capacidade;
        new_bus.valor_passagem = valorPassagem;

        bus->vec_onibus[bus->num_bus_in_vec] = new_bus;

        // Aloca memória para a lista de passageiros do ônibus
        bus->vec_onibus[bus->num_bus_in_vec].lista_passageiros = (Passageiro *)calloc(capacidade, sizeof(Passageiro));

        // Aloca memória para os dados da viagem
        bus->vec_onibus[bus->num_bus_in_vec].dados_da_viagem = (DadosViagem *) calloc(1, sizeof(DadosViagem));;

        if(bus->vec_onibus->dados_da_viagem == NULL){
            perror("Erro ao alocar memoria para os dados da viagem!\n");
            exit(EXIT_FAILURE);
        }

        if (bus->vec_onibus->lista_passageiros == NULL) {
            perror("Erro ao alocar memoria para a lista de passageiros do onibus!\n");
            exit(EXIT_FAILURE);
        }
        // preenchendo os dados da viagem
        strcpy(bus->vec_onibus[bus->num_bus_in_vec].dados_da_viagem->dataPartida_str, dataPartida);
        strcpy(bus->vec_onibus[bus->num_bus_in_vec].dados_da_viagem->dataChegada_str, dataChegada);
        strcpy(bus->vec_onibus[bus->num_bus_in_vec].dados_da_viagem->horarioPartida_str, horarioPartida);
        strcpy(bus->vec_onibus[bus->num_bus_in_vec].dados_da_viagem->horarioChegada_str, horarioChegada);

        bus->num_bus_in_vec++;
        printf("\nOnibus de numero %d cadastrado com sucesso!\n\n", numBus);

    } else {
        fprintf(stderr,"Error in 'add_bus', you are trying add bussers"
        " in bus vector, but there aren't spaces!\n"); // Mensagem de erro
        exit(EXIT_FAILURE); // mata o programa aqui e informa ao sistema operacional sobre esta falha
    }
    
}

void bus_print(const Bus *bus) {
    int dp, mesPartida, ap, dc, mesChegada, ac;
    int hp, mp, sp, hc, mc, sc;
    // Verificando se a lista de onibus está vazia
    if(lista_vazia(bus->num_bus_in_vec) != true){

        printf("\nD A D O S   D O S   O N I B U S\n");
        printf("- - - - - - - - - - - - - - - - - - \n");
        printf("\nNumero de onibus cadastrados na plataforma: %d\n", bus->num_bus_in_vec);
        for (int i = 0; i < bus->num_bus_in_vec; i++) {
            printf("\n\nNumero do Onibus: %d\n", bus->vec_onibus[i].numero_bus);
            printf("Origem: %s\n", bus->vec_onibus[i].origem);
            printf("Destino: %s\n", bus->vec_onibus[i].destino);
            printf("Capacidade: %d\n", bus->vec_onibus[i].capacidade);
            printf("Assentos Disponiveis: %d\n", bus->vec_onibus[i].assentos_disponiveis);
            printf("Valor da passagem: R$ %.2f\n", bus->vec_onibus[i].valor_passagem);

            
            sscanf(bus->vec_onibus[i].dados_da_viagem->dataPartida_str, "%d/%d/%d", &dp, &mesPartida, &ap);

            // Converte a string do dia de partida em dia, mes, ano
            sscanf(bus->vec_onibus[i].dados_da_viagem->dataChegada_str, "%d/%d/%d", &dc, &mesChegada, &ac);

            // Converte a string do dia de partida em dia, mes, ano
            sscanf(bus->vec_onibus[i].dados_da_viagem->horarioPartida_str, "%d:%d:%d", &hp, &mp, &sp);

            // Converte a string do dia de partida em dia, mes, ano
            sscanf(bus->vec_onibus[i].dados_da_viagem->horarioChegada_str, "%d:%d:%d", &hc, &mc, &sc);
            

            printf("Data de Partida: %d/%d/%d\n", dp,mesPartida,ap);
            printf("Data de Chegada: %d/%d/%d\n", dc,mesChegada,ac);
            printf("Horario de Partida: %d:%d\n", hp,mp);
            printf("'Provavel' Horario de Chegada: %d:%d\n", hc,mc);

            // Imprime a lista de passageiros
            printf("\n\n* LISTA DE PASSAGEIROS\n\n");
            printf("_____________________________\n\n");
            if (lista_vazia(bus->vec_onibus[i].lista_passageiros->numPass) == true) { 
                printf("Vazio.\n");
            } else {
                for (int j = 0; j < bus->vec_onibus[i].capacidade - bus->vec_onibus[i].assentos_disponiveis; j++) {
                    printf("\nPassageiro %d:\n", j + 1);
                    printf("Nome: %s\n", bus->vec_onibus[i].lista_passageiros[j].nome);
                    printf("Idade: %d\n", bus->vec_onibus[i].lista_passageiros[j].idade);
                    printf("\n");
                }
            }
            printf("_____________________________\n\n");
        }
        printf("- - - - - - - - - - - - - - - - - - \n\n");

    } else {
        printf("\nNenhuma onibus cadastrado na pagina!\n");
    }
    
}

Como está sendo printado:
D A D O S   D O S   O N I B U S
- - - - - - - - - - - - - - - - - -

Numero de onibus cadastrados na plataforma: 2


Numero do Onibus: 1
Origem: df
Destino: mg
Capacidade: 40
Assentos Disponiveis: 40
Valor da passagem: R$ 300.00
Data de Partida: 4/12/2023
Data de Chegada: 5/12/2023
Horario de Partida: 1939683460:6421684
'Provavel' Horario de Chegada: 3354624:4199120


* LISTA DE PASSAGEIROS

_____________________________

Vazio.
_____________________________



Numero do Onibus: 2
Origem: mg
Destino: sp
Capacidade: 40
Assentos Disponiveis: 40
Valor da passagem: R$ 200.00
Data de Partida: 6/12/2023
Data de Chegada: 7/12/2023
Horario de Partida: 1939683460:6421684
'Provavel' Horario de Chegada: 3354624:4199120


* LISTA DE PASSAGEIROS

_____________________________

Vazio.
_____________________________

- - - - - - - - - - - - - - - - - -

O que há de errado?

// Converte a string do dia de partida em dia, mes, ano
sscanf(bus->vec_onibus[i].dados_da_viagem->horarioPartida_str, "%d:%d:%d", &hp, &mp, &sp);

// Converte a string do dia de partida em dia, mes, ano
sscanf(bus->vec_onibus[i].dados_da_viagem->horarioChegada_str, "%d:%d:%d", &hc, &mc, &sc);

// Converte a string do horário de partida em hora, minuto, segundo
sscanf(bus->vec_onibus[i].dados_da_viagem->horarioPartida_str, "%d:%d:%d", &hp, &mp, &sp);

// Converte a string do horário de chegada em hora, minuto, segundo
sscanf(bus->vec_onibus[i].dados_da_viagem->horarioChegada_str, "%d:%d:%d", &hc, &mc, &sc);